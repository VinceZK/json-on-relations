# For a quick start check out our HTTP Requests collection (Tools|HTTP Client|Open HTTP Requests Collection).
# Following HTTP Request Live Templates are available:
# * 'gtrp' and 'gtr' create a GET request with or without query parameters;
# * 'ptr' and 'ptrp' create a POST request with a simple or parameter-like body;
# * 'mptr' and 'fptr' create a POST request to submit a form with a text or file field (multipart/form-data);

### Create a person instance
POST http://localhost:3000/api/entity
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{ "ENTITY_ID": "person",
  "person": {"HEIGHT": "180", "GENDER": "male", "HOBBY":"Reading, Movie, Coding", "TYPE": "employee", "SYSTEM_ACCESS": "portal"},
  "r_user": {"USER_ID": "DH999", "USER_NAME":"John", "DISPLAY_NAME": "John Wu"},
  "r_email": [{"EMAIL": "dh999@hotmail.com", "TYPE": "private", "PRIMARY":1}],
  "r_employee": {"USER_ID": "DH999", "COMPANY_ID":"Darkhouse", "DEPARTMENT_ID":"Development","TITLE":"Developer"},
  "relationships":[
    { "RELATIONSHIP_ID": "rs_user_role",
      "values":[
        { "SYNCED":0, "action": "add",
          "PARTNER_INSTANCES":[
            {"ENTITY_ID":"system_role", "ROLE_ID":"system_role", "INSTANCE_GUID":"5F50DE92743683E1ED7F964E5B9F6167"}]}
      ]
    }]
}

### Change a person instance:
### 1) Update the HEIGHT and HOBBY of "person" relation;
### 2) Update the USER_NAME of "r_user" relation;
### 3) Add a new email address;
### 4) Add a new relationship to "system_role".
PUT http://localhost:3000/api/entity
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{ "ENTITY_ID": "person",
  "INSTANCE_GUID": "2FBE7490E10F11E8A90957FA46F2CECA",
  "person": {"action": "update", "HEIGHT": 180, "HOBBY":"Reading, Movie"},
  "r_user": {"action": "update", "USER_ID": "DH999", "USER_NAME":"JohnWu"},
  "r_email": [{"action": "add", "EMAIL": "dh999@darkhouse.com", "TYPE": "work", "PRIMARY":0}],
  "relationships":[
    {
      "RELATIONSHIP_ID": "rs_user_role",
      "values": [
        {
          "action": "add",
          "VALID_FROM": "2020-12-31 00:00:00",
          "VALID_TO": "2030-12-31 00:00:00",
          "SYNCED": 1,
          "PARTNER_INSTANCES": [
            {
              "ENTITY_ID": "system_role",
              "ROLE_ID": "system_role",
              "INSTANCE_GUID": "F914BC7E2BD65D42A0B17FBEAD8E1AF2"
            }
          ]
        }
      ]
    }]
}

### Overwrite a person instance.
### Overwrite an instance as a whole. Those appeared relations are updated with new values. Those not appeared are deleted.
### This API is useful in some UI technologies which always regards an entity as a whole.
### The pattern is similar to some document/object store.
### One limitation is that relationships are not supported with overwrite mode. Because a relationship always deals with 2 entities.
PUT http://localhost:3000/api/entity/overwrite
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{ "ENTITY_ID": "person",
  "INSTANCE_GUID": "2FBE7490E10F11E8A90957FA46F2CECA",
  "person": {"HEIGHT": "180", "GENDER": "male", "HOBBY":"Reading, Movie, Coding, Singing"},
  "r_user": {"USER_ID": "DH999", "USER_NAME":"JohnWu", "DISPLAY_NAME": "John Wu"},
  "r_email": [{"EMAIL": "dh999@hotmail.com", "TYPE": "private", "PRIMARY":1}],
  "r_employee": {"USER_ID": "DH999", "COMPANY_ID":"Darkhouse", "DEPARTMENT_ID":"Development","TITLE":"Developer"}
}

### Get an entity instance through its UUID
### The return is an entity instance in JSON format. The relationships are also included
GET http://localhost:3000/api/entity/instance/430C8BB0E1C611E8877F9D5C9668A7A3
Accept: */*
Cache-Control: no-cache

### Get pieces of an entity instance through its UUID.
### Use this API to decide which relations or relationships you need.
### The following example only request 2 relations: "r_user" and "r_email", with one relationship "rs_user_role".
### The return is a projection of entity instance in JSON format.
POST http://localhost:3000/api/entity/instance/piece/2FBE7490E10F11E8A90957FA46F2CECA
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{
  "RELATIONS": ["r_user", "r_email"],
  "RELATIONSHIPS": ["rs_user_role"]
 }

### Get an entity instance through one of its business ID.
### The business ID always belong to one of its relation. For example, the attribute USER_ID is one of the person entity's
### business ID which belongs to relation "r_employee".
### You need to make sure the business ID can uniquely identify the entity, or it will give you the first instance that matches
### this ID.
POST http://localhost:3000/api/entity/instance
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{
  "RELATION_ID": "r_employee",
  "USER_ID": "DH001"
}

### Get pieces of an entity instance through its business ID.
POST http://localhost:3000/api/entity/instance/piece
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{
  "ID": {
    "RELATION_ID": "r_user",
    "USER_ID": "DH001"
  },
  "piece": {
    "RELATIONS": ["r_user", "r_employee", "r_email", "r_address", "r_personalization"],
    "RELATIONSHIPS": ["rs_user_role"]
  }
}

### Get pieces of an entity instance through its business ID as well as some partner entity information .
POST http://localhost:3000/api/entity/instance/piece
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{
  "ID": {
    "RELATION_ID": "r_user",
    "USER_ID": "DH001"
  },
  "piece": {
    "RELATIONS": ["r_user", "r_personalization"],
    "RELATIONSHIPS": [{"RELATIONSHIP_ID": "rs_user_role",
                       "PARTNER_ENTITY_PIECES": {
                          "RELATIONS": ["r_role"], "RELATIONSHIPS": ["rs_user_role"]}
    }]
  }
}

### Get pieces of partner entities' infromation throught its business ID.
POST http://localhost:3000/api/entity/instance/piece
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{
  "ID": {
    "RELATION_ID": "r_user",
    "USER_ID": "DH001"
  },
  "piece": {
    "RELATIONS": ["r_user", "r_personalization"],
    "RELATIONSHIPS": [
      {"RELATIONSHIP_ID": "rs_user_role",
       "PARTNER_ENTITY_PIECES": [
        {"ENTITY_ID": "permission",
         "piece": {"RELATIONS": ["r_role"], "RELATIONSHIPS": ["rs_user_role"]}}]},
      {"RELATIONSHIP_ID": "rs_marriage",
       "PARTNER_ENTITY_PIECES": [
         {"ENTITY_ID": "person",
           "piece": {"RELATIONS": ["person"]}}]}
    ]
  }
}

### Get recursive pieces of partner entities' infromation throught its business ID.
POST http://localhost:3000/api/entity/instance/piece
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{
  "ID": {
    "RELATION_ID": "r_user",
    "USER_ID": "DH001"
  },
  "piece": {
    "RELATIONS": ["r_user"],
    "RELATIONSHIPS": [
      {"RELATIONSHIP_ID": "rs_user_role",
        "PARTNER_ENTITY_PIECES": [
          {"ENTITY_ID": "permission",
            "piece": {
              "RELATIONS": ["r_role"],
              "RELATIONSHIPS": [{
                "RELATIONSHIP_ID": "rs_user_role",
                "PARTNER_ENTITY_PIECES": {"RELATIONSHIPS": ["rs_marriage"]}
              }]}}]},
      {"RELATIONSHIP_ID": "rs_marriage",
        "PARTNER_ENTITY_PIECES":  {
          "RELATIONS": ["person"],
          "RELATIONSHIPS": [{
            "RELATIONSHIP_ID": "rs_marriage",
            "PARTNER_ENTITY_PIECES": {"RELATIONSHIPS": ["rs_user_role"]}}]}}
    ]
  }
}

### Get a blog and its comments
POST http://localhost:3000/api/entity/instance
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{
  "RELATION_ID": "blog",
  "ID": "229"
}

### Soft delete a user
PUT http://localhost:3000/api/entity/instance/softDelete/308B94F011A911E9927AC30A42C011EC
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

### Restore a user
PUT http://localhost:3000/api/entity/instance/restore/308B94F011A911E9927AC30A42C011EC
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

### Delete a user phiscally
DELETE http://localhost:3000/api/entity/instance/308B94F011A911E9927AC30A42C011EC
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

### General Query Request
### The query is defined as a JSON object with attributes: "relation", "projection", and "filter".
### The "relation" defines the leading relation(table). You can project fields not only from the leading relation,
### but also from the associated relations. The system helps you do the left joins.
### The filter is limited with operators: EQ, NE, GT, GE, LT, LE, BT.
### You can also use fields from the assoicated relations.
POST http://localhost:3000/api/query
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{
  "ENTITY_ID": "person",
  "RELATION_ID": "r_user",
  "PROJECTION": [
    "USER_ID",
    "USER_NAME",
    "GIVEN_NAME",
    {"FIELD_NAME": "COMPANY_ID", "ALIAS": "Company", "RELATION_ID": "r_employee"}
  ],
  "FILTER": [
    {
      "FIELD_NAME": "USER_ID",
      "OPERATOR": "BT",
      "LOW": "DH001",
      "HIGH": "DH999"
    },
    {
      "FIELD_NAME": "LANGUAGE",
      "OPERATOR": "EQ",
      "RELATION_ID": "r_personalization",
      "LOW": "ZH"
    }
  ],
  "SORT": [
    {
      "FIELD_NAME": "LANGUAGE",
      "RELATION_ID": "r_personalization",
      "ORDER": "desc"
    }
  ]
}

### Get the meta data of a given entity type
GET http://localhost:3000/api/entity/meta/person
Accept: */*
Cache-Control: no-cache

### Get the meta data of a given relation
GET http://localhost:3000/api/relation/meta/r_retail_customer
Accept: */*
Cache-Control: no-cache

### Get all the relations' meta data of a given entity
GET http://localhost:3000/api/relation/meta/entity/person
Accept: */*
Cache-Control: no-cache

### List all the entity types in the system
GET http://localhost:3000/api/entity/entityIDs
Accept: */*
Cache-Control: no-cache

###
GET http://localhost:3000/api/model/entity-types?term=people
Accept: */*
Cache-Control: no-cache

###
GET http://localhost:3000/api/model/relations?term=person
Accept: */*
Cache-Control: no-cache

###
GET http://localhost:3000/api/model/relationships?term=marriage
Accept: */*
Cache-Control: no-cache

###
GET http://localhost:3000/api/model/relationships/rs_marriage
Accept: */*
Cache-Control: no-cache

###
GET http://localhost:3000/api/model/roles/system_role
Accept: */*
Cache-Control: no-cache

###
GET http://localhost:3000/api/model/roles/system_role/desc
Accept: */*
Cache-Control: no-cache

###
POST http://localhost:3000/api/function/testFunction
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{"data": "Hello Vincent"}

###
POST http://localhost:3000/api/query
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

{"ENTITY_ID":"blog", "RELATION_ID":"blog", "PROJECTION":["AUTHOR","ID","NUM_READS","PUBLISHED","PUBLISH_TIME","TITLE","ABSTRACT","NAME"],"SORT":["PUBLISH_TIME"]}

###


